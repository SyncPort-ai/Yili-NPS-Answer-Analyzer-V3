# NPS V3 Analysis System - Production Docker Compose Configuration
# Comprehensive multi-service deployment for production environment

version: '3.8'

services:
  # Main NPS V3 Analysis API Service
  nps-v3-api:
    build:
      context: ../
      dockerfile: deployment/Dockerfile
      args:
        - BUILD_ENV=production
    image: yldc-docker.pkg.coding.yili.com/nps-v3-analyzer:${NPS_V3_VERSION:-latest}
    container_name: nps-v3-api
    restart: unless-stopped
    ports:
      - "${NPS_V3_PORT:-8000}:8000"
    environment:
      # Application Configuration
      - NPS_V3_ENV=production
      - NPS_V3_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NPS_V3_WORKERS=${WORKERS:-4}
      - NPS_V3_DEBUG=false

      # Database Configuration
      - NPS_V3_DATABASE_URL=${DATABASE_URL}
      - NPS_V3_REDIS_URL=redis://redis:6379/0

      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - YILI_APP_KEY=${YILI_APP_KEY}
      - YILI_GATEWAY_URL=${YILI_GATEWAY_URL}

      # Monitoring Configuration
      - NPS_MONITOR_ERROR_RATE_THRESHOLD=${MONITOR_ERROR_RATE:-0.02}
      - NPS_MONITOR_DURATION_THRESHOLD=${MONITOR_DURATION:-15.0}
      - NPS_MONITOR_CPU_THRESHOLD=${MONITOR_CPU:-70.0}
      - NPS_MONITOR_MEMORY_THRESHOLD=${MONITOR_MEMORY:-70.0}

      # Security Configuration
      - NPS_V3_SECRET_KEY=${SECRET_KEY}
      - NPS_V3_CORS_ORIGINS=${CORS_ORIGINS:-https://your-domain.com}

    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./data/cache:/app/data/cache
      - ./config:/app/config:ro
    depends_on:
      - redis
      - mongodb
    networks:
      - nps-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/health_check.sh"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: nps-v3-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1 300 10 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # MongoDB Database Service
  mongodb:
    image: mongo:7.0
    container_name: nps-v3-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=nps_v3
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./config/mongodb:/docker-entrypoint-initdb.d:ro
    networks:
      - nps-network
    command: mongod --auth --bind_ip_all --replSet rs0
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: nps-v3-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - nps-v3-api
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: nps-v3-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: nps-v3-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # File Storage Service (MinIO S3-compatible)
  minio:
    image: minio/minio:RELEASE.2023-11-20T22-40-07Z
    container_name: nps-v3-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - nps-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log Aggregation (ELK Stack - Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nps-v3-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Log Processing (Logstash)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: nps-v3-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/var/log/apps:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log Visualization (Kibana)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nps-v3-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - nps-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# Networks
networks:
  nps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent Volumes
volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  nginx-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local
  elasticsearch-data:
    driver: local